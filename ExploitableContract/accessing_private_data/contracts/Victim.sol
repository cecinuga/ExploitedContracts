//SPDX-License-Identifier: Unlicensed
pragma solidity ^0.6.10;

contract Victim {
    uint public count = 123;
    address public owner = msg.sender;
    bool public isTrue = true;
    uint16 public u16 = 31;
     uint public constant someConst = 123;
    bytes32[3] public data;
    struct User {
        uint _id;
        bytes32 password;
    }
    User[] private users;
    mapping(uint => User) private idToUser;
    
    constructor(bytes32 _password) public {
        password = _password;
    }
    function addUser(bytes32 _password) public {
        User memory user = User({_id:users.length, password:_password});
        users.push(user);
        idToUser[user._id] = user;
    }
    function getArrayLocation(
        uint slot, 
        uint index, 
        uint elementSize
    ) public pure returns(uint) {
        return uint(keccak256(abi.encodePacked(slot))) + (index + elementSize);
    }

    function getMapLocation(uint slot, uint key) public pure returns(uint){
        return uint(keccak256(abi.encodePacked(key, slot)));
    }

} 

//commands to launch from truffle 
/*

*/